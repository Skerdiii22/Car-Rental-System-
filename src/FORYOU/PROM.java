package FORYOU;

import java.sql.ResultSetMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author user
 */
public class PROM extends javax.swing.JFrame {
Connection con=null;
private int user_id;
    /**
     * Creates new form PROM
     */
    public PROM(int id) {
        con=DBConnection.connect();
        initComponents();
        user_id=id;
    }
private PROM() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setText("Book a Promotion Car with Orskyan Tokens!");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N
        jLabel2.setText("The first user to reach the price of promotion in Orskyan Tokens can book the car for the rest of the month.");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N
        jLabel3.setText("Each month new cars will be available.");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        jButton1.setText("View Cars");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        jButton2.setText("Book Car");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jButton1)
                        .addGap(42, 42, 42)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
        String query = "SELECT * FROM `Promotion`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
           
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      try {
        // Check if the user has enough tokens
        
        int carId = getSelectedCarId(); // Replace with actual code to fetch the ID of the selected car
        String carMake = getSelectedCarMake(); // Replace with actual code to fetch the make of the selected car
        int tokensPrice = getTokensPrice(); // Replace with actual code to fetch tokens_price for the selected car
        int userTokens = getUserTokens(); // Replace with actual code to fetch the user's token balance

        if (userTokens >= tokensPrice) {
            // Check if the reservation limit for the selected car has been reached
            if (!isCarReservationLimitReached(carId)) {
                // Start a transaction
                con.setAutoCommit(false);

                // Insert reservation
                insertReservation(user_id, carId, carMake);

                // Deduct tokens from the user's balance
                updateUserTokens(user_id, userTokens - tokensPrice);

                // Commit the transaction
                con.commit();

                JOptionPane.showMessageDialog(null, "Car reserved successfully.");
            } else {
                JOptionPane.showMessageDialog(null, "Car reservation limit reached for this car.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Not enough tokens to reserve the car.");
        }
    } catch (SQLException e) {
        // Handle database errors and roll back the transaction
        try {
            con.rollback();
        } catch (SQLException rollbackException) {
            rollbackException.printStackTrace();
        }
        e.printStackTrace();
    } finally {
        try {
            con.setAutoCommit(true); // Restore auto-commit mode
        } catch (SQLException autoCommitException) {
            autoCommitException.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton2ActionPerformed
private void insertReservation(int userId,int carId,String carMake) throws SQLException {
    String query = "INSERT INTO Prom_Reserve (user_id, Car_id, make,Start_date,End_date) VALUES (?, ?, ?, CURDATE(), LAST_DAY(CURDATE()))";
    try (PreparedStatement preparedStatement = con.prepareStatement(query)) {
        preparedStatement.setInt(1, userId);
        preparedStatement.setString(3, carMake);
        preparedStatement.setInt(2, carId);
        preparedStatement.executeUpdate();
        
    }
}
private boolean isCarReservationLimitReached(int carId) throws SQLException {
    String query = "SELECT COUNT(*) AS count FROM Prom_Reserve WHERE Car_id = ?";
    try (PreparedStatement preparedStatement = con.prepareStatement(query)) {
        preparedStatement.setInt(1, carId);
        try (ResultSet resultSet = preparedStatement.executeQuery()) {
            if (resultSet.next()) {
                int reservationCount = resultSet.getInt("count");
                return reservationCount >= 3;
            } else {
                // Handle the case where the car doesn't exist or other error scenarios
                throw new SQLException("Car not found or other error.");
            }
        }
    }
}
private void updateUserTokens(int userId, int newTokenBalance) throws SQLException {
    String query = "UPDATE Orskyan_Tokens SET Tokens = ? WHERE Usrid = ?";
    try (PreparedStatement preparedStatement = con.prepareStatement(query)) {
        preparedStatement.setInt(1, newTokenBalance);
        preparedStatement.setInt(2, userId);
        preparedStatement.executeUpdate();
    }
}
private int getSelectedCarId(){
    int carId = -1;
    int selectedRow = table.getSelectedRow();
    DefaultTableModel model = (DefaultTableModel) table.getModel();
   if (selectedRow >= 0) {
        // Assuming the car ID is in the first column of your table (column 0)
        carId = (int) model.getValueAt(selectedRow, 0);
        System.out.println("Id: "+carId);
    } else {
        // Handle the case where no row is selected or an error occurs
        // You might display an error message or log the error
        JOptionPane.showMessageDialog(null, "Please select a car!");
    }

  return carId;
    
}
private String getSelectedCarMake(){
    String make =null;
    int selectedRow = table.getSelectedRow();
    DefaultTableModel model = (DefaultTableModel) table.getModel();
   if (selectedRow >= 0) {
       
        make = (String) model.getValueAt(selectedRow, 1);
        System.out.println("Make: "+make);
    } else {
        // Handle the case where no row is selected or an error occurs
        // You might display an error message or log the error
        JOptionPane.showMessageDialog(null, "Please select a car!");
    }

  return make;
}
private int getTokensPrice(){
    int token = -1;
    int selectedRow = table.getSelectedRow();
    DefaultTableModel model = (DefaultTableModel) table.getModel();
   if (selectedRow >= 0) {
       
        token = (int) model.getValueAt(selectedRow, 4);
        System.out.println("Tokens: "+token);
    } else {
        // Handle the case where no row is selected or an error occurs
        // You might display an error message or log the error
        JOptionPane.showMessageDialog(null, "Please select a car!");
    }

  return token;
}
private int getUserTokens() {
    int userTokens = 0; // Initialize with an appropriate default value or error value
    
    try {
        // Assuming you have a database connection (con)
        String query = "SELECT Tokens FROM Orskyan_Tokens WHERE Usrid = ?";
        
        try (PreparedStatement preparedStatement = con.prepareStatement(query)) {
            preparedStatement.setInt(1, user_id);
            
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    userTokens = resultSet.getInt("Tokens");
                    System.out.println("User tokens"+userTokens);
                } else {
                    // Handle the case where the user ID is not found in the database
                    // You might want to display an error message or log the error
                    System.err.println("User ID not found in the database.");
                }
            }
        }
    } catch (SQLException e) {
        // Handle database errors here, such as connection issues or query errors
        e.printStackTrace();
        // You might want to throw an exception or return an error value in case of a failure
    }

    return userTokens;
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PROM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PROM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PROM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PROM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PROM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

   
        
    
}
