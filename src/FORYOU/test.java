/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FORYOU;

import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author user
 */
public class test extends javax.swing.JFrame {
Connection con=null;
ResultSet rs=null;
DefaultTableModel model = null;
PreparedStatement pst= null;
private int user_id;
private int qr_id;
    /**
     * Creates new form test
     */
    public test(int id) {
        initComponents();
         con=DBConnection.connect();//the DBConnection class is already created
         user_id=id;
    }

    private test( ) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panel2 = new java.awt.Panel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        textArea1 = new java.awt.TextArea();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        timePicker2 = new com.github.lgooddatepicker.components.TimePicker();
        jButton2 = new javax.swing.JButton();
        a = new javax.swing.JLabel();
        b = new javax.swing.JLabel();
        c = new javax.swing.JLabel();
        d = new javax.swing.JLabel();
        e = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        panel3 = new java.awt.Panel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table11 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jDateChooser7 = new com.toedter.calendar.JDateChooser();
        jLabel23 = new javax.swing.JLabel();
        jDateChooser8 = new com.toedter.calendar.JDateChooser();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        timePicker7 = new com.github.lgooddatepicker.components.TimePicker();
        timePicker8 = new com.github.lgooddatepicker.components.TimePicker();
        j10 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        j11 = new javax.swing.JLabel();
        j12 = new javax.swing.JLabel();
        j13 = new javax.swing.JLabel();
        j14 = new javax.swing.JLabel();
        panel4 = new java.awt.Panel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table12 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jDateChooser5 = new com.toedter.calendar.JDateChooser();
        jLabel13 = new javax.swing.JLabel();
        jDateChooser6 = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        timePicker5 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel15 = new javax.swing.JLabel();
        timePicker6 = new com.github.lgooddatepicker.components.TimePicker();
        j20 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        j21 = new javax.swing.JLabel();
        j22 = new javax.swing.JLabel();
        j23 = new javax.swing.JLabel();
        j24 = new javax.swing.JLabel();
        panel5 = new java.awt.Panel();
        jScrollPane5 = new javax.swing.JScrollPane();
        table13 = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        jDateChooser9 = new com.toedter.calendar.JDateChooser();
        jLabel33 = new javax.swing.JLabel();
        jDateChooser10 = new com.toedter.calendar.JDateChooser();
        jLabel34 = new javax.swing.JLabel();
        timePicker9 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel35 = new javax.swing.JLabel();
        timePicker10 = new com.github.lgooddatepicker.components.TimePicker();
        j30 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        j31 = new javax.swing.JLabel();
        j32 = new javax.swing.JLabel();
        j33 = new javax.swing.JLabel();
        j34 = new javax.swing.JLabel();
        panel6 = new java.awt.Panel();
        jScrollPane6 = new javax.swing.JScrollPane();
        table14 = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        jDateChooser11 = new com.toedter.calendar.JDateChooser();
        jLabel43 = new javax.swing.JLabel();
        jDateChooser12 = new com.toedter.calendar.JDateChooser();
        jLabel44 = new javax.swing.JLabel();
        timePicker11 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel45 = new javax.swing.JLabel();
        timePicker12 = new com.github.lgooddatepicker.components.TimePicker();
        j40 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        j41 = new javax.swing.JLabel();
        j42 = new javax.swing.JLabel();
        j43 = new javax.swing.JLabel();
        j44 = new javax.swing.JLabel();
        panel7 = new java.awt.Panel();
        jScrollPane7 = new javax.swing.JScrollPane();
        table15 = new javax.swing.JTable();
        jButton14 = new javax.swing.JButton();
        jLabel52 = new javax.swing.JLabel();
        jDateChooser13 = new com.toedter.calendar.JDateChooser();
        jLabel53 = new javax.swing.JLabel();
        jDateChooser14 = new com.toedter.calendar.JDateChooser();
        jLabel54 = new javax.swing.JLabel();
        timePicker13 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel55 = new javax.swing.JLabel();
        timePicker14 = new com.github.lgooddatepicker.components.TimePicker();
        j50 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        j51 = new javax.swing.JLabel();
        j52 = new javax.swing.JLabel();
        j53 = new javax.swing.JLabel();
        j54 = new javax.swing.JLabel();
        panel8 = new java.awt.Panel();
        jScrollPane8 = new javax.swing.JScrollPane();
        table16 = new javax.swing.JTable();
        jButton15 = new javax.swing.JButton();
        jLabel62 = new javax.swing.JLabel();
        jDateChooser15 = new com.toedter.calendar.JDateChooser();
        jLabel63 = new javax.swing.JLabel();
        jDateChooser16 = new com.toedter.calendar.JDateChooser();
        jLabel64 = new javax.swing.JLabel();
        timePicker15 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel65 = new javax.swing.JLabel();
        timePicker16 = new com.github.lgooddatepicker.components.TimePicker();
        j60 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        j61 = new javax.swing.JLabel();
        j62 = new javax.swing.JLabel();
        j63 = new javax.swing.JLabel();
        j64 = new javax.swing.JLabel();
        panel1 = new java.awt.Panel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser4 = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        timePicker3 = new com.github.lgooddatepicker.components.TimePicker();
        jLabel10 = new javax.swing.JLabel();
        timePicker4 = new com.github.lgooddatepicker.components.TimePicker();
        totale = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        z = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        yyyear = new javax.swing.JLabel();
        lbel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton17 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel6.setText("Choose the end date:");
        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel7.setText("Choose the pick-up time:");
        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jButton1.setText("Display Cars");
        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Choose the hand-over time:");

        jButton2.setText("Reserve!");
        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        a.setText("Make");
        a.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        b.setText("Model");
        b.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        c.setText("Year");
        c.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        d.setText("Price per day");
        d.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        e.setText("Press To See The Total Price!");
        e.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N
        e.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eMouseClicked(evt);
            }
        });

        jLabel2.setText("$");
        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        jLabel5.setText("Choose the start date:");
        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jButton1)
                            .addComponent(jLabel8)
                            .addGroup(panel2Layout.createSequentialGroup()
                                .addComponent(e)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2))
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jDateChooser2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(timePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(d)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a)
                    .addComponent(b)
                    .addComponent(c)
                    .addComponent(d))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton1)
                .addGap(46, 46, 46)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(timePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(e)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(27, 27, 27))
        );

        jTabbedPane1.addTab("Economic Cars", panel2);

        table11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table11MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(table11);

        jButton8.setText("Display Cars");
        jButton8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel22.setText("Choose the pick-up time:");
        jLabel22.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel23.setText("Choose the hand-over time:");
        jLabel23.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel24.setText("Choose the pick-up date:");
        jLabel24.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel25.setText("Choose the hand-over date:");

        j10.setText("Press to see the total price");
        j10.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N
        j10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j10MouseClicked(evt);
            }
        });

        jLabel27.setText("$");
        jLabel27.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        jButton7.setText("Reserve!");
        jButton7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        j11.setText("Make");
        j11.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j12.setText("Model");
        j12.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j13.setText("Year");
        j13.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j14.setText("Price");
        j14.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panel3Layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addComponent(jButton8))
                                    .addComponent(jDateChooser7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel23)
                                .addComponent(jDateChooser8, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel24)
                                .addComponent(jLabel25)
                                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(timePicker7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(timePicker8, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel3Layout.createSequentialGroup()
                                .addComponent(j10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27)
                                .addGap(15, 15, 15))))
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(panel3Layout.createSequentialGroup()
                .addGap(343, 343, 343)
                .addComponent(j11)
                .addGap(102, 102, 102)
                .addComponent(j12)
                .addGap(87, 87, 87)
                .addComponent(j13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addComponent(j14)
                .addGap(55, 55, 55))
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jButton8)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel24)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel25)
                        .addGap(23, 23, 23)
                        .addComponent(jDateChooser8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timePicker7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel23)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(j10)
                            .addComponent(jLabel27))
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)))
                .addGap(18, 18, 18)
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(j11)
                    .addComponent(j12)
                    .addComponent(j13)
                    .addComponent(j14))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sedans", panel3);

        table12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table12MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(table12);

        jButton5.setText("Display Cars");
        jButton5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel11.setText("Choose the pick-up date:");
        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel13.setText("Choose the hand-over date:");

        jLabel14.setText("Choose the pick-up time:");
        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel15.setText("Choose the hand-over time:");
        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        j20.setText("Press to see the total price");
        j20.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N
        j20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j20MouseClicked(evt);
            }
        });

        jLabel17.setText("$");
        jLabel17.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        jButton6.setText("Reserve!");
        jButton6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        j21.setText("Make");
        j21.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j22.setText("Model");
        j22.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j23.setText("Year");
        j23.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j24.setText("Price");
        j24.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
        panel4.setLayout(panel4Layout);
        panel4Layout.setHorizontalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel4Layout.createSequentialGroup()
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jButton5))
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14)
                            .addGroup(panel4Layout.createSequentialGroup()
                                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(j20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17))))
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jDateChooser5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13))
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timePicker5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timePicker6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(j21)
                        .addGap(99, 99, 99)
                        .addComponent(j22)
                        .addGap(86, 86, 86)
                        .addComponent(j23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                        .addComponent(j24)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
        );
        panel4Layout.setVerticalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel4Layout.createSequentialGroup()
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel4Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jButton5)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timePicker5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timePicker6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(j20)
                            .addComponent(jLabel17))))
                .addGap(18, 18, 18)
                .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6)
                    .addGroup(panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(j21)
                        .addComponent(j22)
                        .addComponent(j23)
                        .addComponent(j24)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SUVs", panel4);

        table13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table13MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(table13);

        jButton9.setText("Display Cars");
        jButton9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel32.setText("Choose the pick-up date:");
        jLabel32.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel33.setText("Choose the hand-over date:");
        jLabel33.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel34.setText("Choose the pick-up time:");
        jLabel34.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel35.setText("Choose the hand-over time:");
        jLabel35.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        j30.setText("Press to see the total price");
        j30.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        j30.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j30MouseClicked(evt);
            }
        });

        jLabel37.setText("$");
        jLabel37.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        jButton10.setText("Reserve!");
        jButton10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        j31.setText("Make");
        j31.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j32.setText("Model");
        j32.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j33.setText("Year");
        j33.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j34.setText("Price");
        j34.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        javax.swing.GroupLayout panel5Layout = new javax.swing.GroupLayout(panel5);
        panel5.setLayout(panel5Layout);
        panel5Layout.setHorizontalGroup(
            panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton9)
                            .addComponent(jLabel32)
                            .addComponent(jDateChooser9, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel33)
                        .addComponent(jDateChooser10, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel35)
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(timePicker9, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34))
                        .addComponent(timePicker10, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel5Layout.createSequentialGroup()
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel37)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(panel5Layout.createSequentialGroup()
                .addGap(295, 295, 295)
                .addComponent(j31)
                .addGap(127, 127, 127)
                .addComponent(j32)
                .addGap(101, 101, 101)
                .addComponent(j33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(j34)
                .addGap(60, 60, 60))
        );
        panel5Layout.setVerticalGroup(
            panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel5Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel5Layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel32)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel34)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel35)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(j30)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(j31)
                    .addComponent(j32)
                    .addComponent(j33)
                    .addComponent(j34))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Luxury Cars", panel5);

        table14.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table14MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(table14);

        jButton11.setText("Display Cars");
        jButton11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel42.setText("Choose the pick-up date:");
        jLabel42.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel43.setText("Choose the hand-over date:");
        jLabel43.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel44.setText("Choose the pick-up time:");
        jLabel44.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel45.setText("Choose the hand-over time:");
        jLabel45.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        j40.setText("Press to see the total price");
        j40.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N
        j40.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j40MouseClicked(evt);
            }
        });

        jLabel47.setText("$");
        jLabel47.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        jButton12.setText("Reserve!");
        jButton12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        j41.setText("Make");
        j41.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j42.setText("Model");
        j42.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j43.setText("Year");
        j43.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j44.setText("Price");
        j44.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        javax.swing.GroupLayout panel6Layout = new javax.swing.GroupLayout(panel6);
        panel6.setLayout(panel6Layout);
        panel6Layout.setHorizontalGroup(
            panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel6Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton11)
                                .addComponent(jLabel42))
                            .addComponent(jDateChooser11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel43)
                        .addComponent(jDateChooser12, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel45)
                        .addComponent(timePicker12, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(timePicker11, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel44)))
                    .addGroup(panel6Layout.createSequentialGroup()
                        .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j40))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel47)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(panel6Layout.createSequentialGroup()
                .addGap(312, 312, 312)
                .addComponent(j41)
                .addGap(103, 103, 103)
                .addComponent(j42)
                .addGap(99, 99, 99)
                .addComponent(j43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(j44)
                .addGap(66, 66, 66))
        );
        panel6Layout.setVerticalGroup(
            panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel6Layout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel42)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel43)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel44)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel45)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(j40)
                            .addComponent(jLabel47))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton12))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(j41)
                    .addComponent(j42)
                    .addComponent(j43)
                    .addComponent(j44))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cabriolet", panel6);

        table15.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table15MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(table15);

        jButton14.setText("Display Cars");
        jButton14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel52.setText("Choose the pick-up date:");
        jLabel52.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel53.setText("Choose the hand-over date:");
        jLabel53.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel54.setText("Choose the pick-up time:");
        jLabel54.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel55.setText("Choose the hand-over time:");
        jLabel55.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        j50.setText("Press to see the total price");
        j50.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N
        j50.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j50MouseClicked(evt);
            }
        });

        jLabel57.setText("$");
        jLabel57.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        jButton13.setText("Reserve!");
        jButton13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        j51.setText("Make");
        j51.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j52.setText("Model");
        j52.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j53.setText("Year");
        j53.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j54.setText("Price");
        j54.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        javax.swing.GroupLayout panel7Layout = new javax.swing.GroupLayout(panel7);
        panel7.setLayout(panel7Layout);
        panel7Layout.setHorizontalGroup(
            panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel7Layout.createSequentialGroup()
                .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel7Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jButton14))
                    .addGroup(panel7Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel53)
                            .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel52, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jDateChooser13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jDateChooser14, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(timePicker13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel54, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel55)
                            .addComponent(timePicker14, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel7Layout.createSequentialGroup()
                                .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(j50, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel57)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(panel7Layout.createSequentialGroup()
                .addGap(329, 329, 329)
                .addComponent(j51)
                .addGap(109, 109, 109)
                .addComponent(j52)
                .addGap(106, 106, 106)
                .addComponent(j53)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(j54)
                .addGap(38, 38, 38))
        );
        panel7Layout.setVerticalGroup(
            panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel7Layout.createSequentialGroup()
                        .addComponent(jButton14)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel52)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel53)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel54)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel55)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(j50)
                            .addComponent(jLabel57))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton13))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(j51)
                    .addComponent(j52)
                    .addComponent(j53)
                    .addComponent(j54))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sports Cars", panel7);

        table16.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table16MouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(table16);

        jButton15.setText("Display Cars");
        jButton15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel62.setText("Choose the pick-up date:");
        jLabel62.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel63.setText("Choose the hand-over date:");
        jLabel63.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel64.setText("Choose the pick-up time:");
        jLabel64.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jLabel65.setText("Choose the hand-over time:");
        jLabel65.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        j60.setText("Press to see the total price");
        j60.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        j60.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j60MouseClicked(evt);
            }
        });

        jLabel67.setText("$");
        jLabel67.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N

        jButton16.setText("Reserve!");
        jButton16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        j61.setText("Make");
        j61.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j62.setText("Model");
        j62.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j63.setText("Year");
        j63.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        j64.setText("Price");
        j64.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N

        javax.swing.GroupLayout panel8Layout = new javax.swing.GroupLayout(panel8);
        panel8.setLayout(panel8Layout);
        panel8Layout.setHorizontalGroup(
            panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel8Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton15)
                                .addComponent(jLabel62))
                            .addComponent(jDateChooser15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel63)
                        .addComponent(jDateChooser16, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(timePicker15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel64, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jLabel65)
                        .addComponent(timePicker16, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel8Layout.createSequentialGroup()
                        .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(j60))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel67)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(panel8Layout.createSequentialGroup()
                .addGap(324, 324, 324)
                .addComponent(j61)
                .addGap(104, 104, 104)
                .addComponent(j62)
                .addGap(97, 97, 97)
                .addComponent(j63)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(j64)
                .addGap(67, 67, 67))
        );
        panel8Layout.setVerticalGroup(
            panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel8Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel8Layout.createSequentialGroup()
                        .addComponent(jButton15)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel62)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel63)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel64)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel65)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(j60)
                            .addComponent(jLabel67))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton16))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(j61)
                    .addComponent(j62)
                    .addComponent(j63)
                    .addComponent(j64))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Electric Cars", panel8);

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table2);

        jButton3.setText("Display Cars");
        jButton3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Choose the start date:");
        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel4.setText("Choose the end date:");

        jLabel9.setText("Choose the start time:");

        jLabel10.setText("Choose the hand-over time:");

        totale.setText("Press here to see the total price");
        totale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totaleMouseClicked(evt);
            }
        });

        jLabel12.setText("$");

        jButton4.setText("Reserve!");
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        z.setText("Make");
        z.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N

        label.setText("Model");
        label.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N

        yyyear.setText("Year");
        yyyear.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N

        lbel.setText("Price per day");
        lbel.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139)
                        .addComponent(z)
                        .addGap(82, 82, 82)
                        .addComponent(label)
                        .addGap(91, 91, 91)
                        .addComponent(yyyear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbel)
                        .addGap(55, 55, 55))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addComponent(timePicker3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(111, 111, 111))
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton3)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jDateChooser3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jDateChooser4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel10)
                                    .addGroup(panel1Layout.createSequentialGroup()
                                        .addComponent(totale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12))
                                    .addComponent(timePicker4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(timePicker4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totale)
                            .addComponent(jLabel12)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addGap(25, 25, 25))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label)
                            .addComponent(z)
                            .addComponent(yyyear)
                            .addComponent(lbel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Compact Cars", panel1);

        jLabel1.setText("Orskyan Car Rental!");
        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N

        jButton17.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        jButton17.setText("Exit");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 794, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addComponent(jButton17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton17)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
model=(DefaultTableModel) table.getModel();
        int SelectedRows=table.getSelectedRow();
        a.setText(table.getValueAt(SelectedRows, 0).toString());
        b.setText(table.getValueAt(SelectedRows, 1).toString());
        c.setText(table.getValueAt(SelectedRows, 2).toString());
        d.setText(table.getValueAt(SelectedRows, 3).toString());       
        
        
    }//GEN-LAST:event_tableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
        String query = "SELECT * FROM `Economy_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
           
       
           
           
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
        
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser1.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker1.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser2.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker2.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(d.getText());
        int total_price=diff_days*price ;
           
        e.setText(String.valueOf(total_price));
        
        // Check for overlapping reservations
       
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker2.getTime().isBefore(timePicker1.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
         if (checkForOverlappingReservations(b.getText(), datepick, datepick2)) {
            JOptionPane.showMessageDialog(null, "This car is already reserved during the selected dates");
            return;
        }
        else{
           String q= "INSERT INTO `reserve`(`Date_1`,`Date_2`,`Time_1`,`Time_2`,`Car_Model`, `user_id`) VALUES ('"+datepickk+"','"+datepick2+"','"+timePicke+"','"+timePicke2+"','"+b.getText()+"','"+user_id+"')";
           PreparedStatement pst=con.prepareStatement(q);
           pst.execute();
           JOptionPane.showMessageDialog(null, "Please save the following QR Code in oreder to show it to us when taking the car!");
           
           String qrData= "Start date: "+ datepickk+" End date: "+datepick2+" Start time: "+ timePicke+" End time: "+timePicke2+" User id: "+user_id+" Car model: "+b.getText()+ " Total Price: "+total_price;
           BufferedImage qrCodeImage= generateQRCode(qrData);
           JFrame qrCodeFrame = new JFrame("QR Code");
    qrCodeFrame.setSize(400, 400);
    qrCodeFrame.setLocationRelativeTo(null);
    qrCodeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    JPanel qrCodePanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(qrCodeImage, 75, 75, null);
        }
    };  
    qrCodeFrame.add(qrCodePanel);
    qrCodeFrame.setVisible(true);
        }
         
        
                
                }catch(Exception e){
            System.out.println("The error is: "+ e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
        
        
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void eMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eMouseClicked
       try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser1.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker1.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser2.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker2.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(d.getText());
        int total_price=diff_days*price ;
           
        e.setText(String.valueOf(total_price));
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker2.getTime().isBefore(timePicker1.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
       }catch(Exception e){
                System.out.println("The error is: "+ e);
                }
    }//GEN-LAST:event_eMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
        String query = "SELECT * FROM `Compact_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table2.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
           
       
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser3.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker3.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser4.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker4.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(lbel.getText());
        int total_price=diff_days*price ;
           
        e.setText(String.valueOf(total_price));
        
        // Check for overlapping reservations
       
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker4.getTime().isBefore(timePicker3.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
         if (checkForOverlappingReservations(label.getText(), datepick, datepick2)) {
            JOptionPane.showMessageDialog(null, "This car is already reserved during the selected dates");
            return;
        }
        else{
           String q= "INSERT INTO `reserve`(`Date_1`,`Date_2`,`Time_1`,`Time_2`,`Car_Model`, `user_id`) VALUES ('"+datepickk+"','"+datepick2+"','"+timePicke+"','"+timePicke2+"','"+label.getText()+"','"+user_id+"')";
           PreparedStatement pst=con.prepareStatement(q);
           pst.execute();
           JOptionPane.showMessageDialog(null, "Please save the following QR Code in oreder to show it to us when taking the car!");
           
           String qrData= "Start date: "+ datepickk+" End date: "+datepick2+" Start time: "+ timePicke+" End time: "+timePicke2+" User id: "+user_id+" Car model: "+label.getText()+ " Total Price: "+total_price;
           BufferedImage qrCodeImage= generateQRCode(qrData);
           JFrame qrCodeFrame = new JFrame("QR Code");
    qrCodeFrame.setSize(400, 400);
    qrCodeFrame.setLocationRelativeTo(null);
    qrCodeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    JPanel qrCodePanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(qrCodeImage, 75, 75, null);
        }
    };  
    qrCodeFrame.add(qrCodePanel);
    qrCodeFrame.setVisible(true);
        }
         
        
                
                }catch(Exception e){
            System.out.println("The error is: "+ e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void totaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totaleMouseClicked
        
      try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser3.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker3.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser4.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker4.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(lbel.getText());
        int total_price=diff_days*price ;
           
        totale.setText(String.valueOf(total_price));
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker4.getTime().isBefore(timePicker3.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
       }catch(Exception e){
                System.out.println("The error is: "+ e);
                }  
        
        
    }//GEN-LAST:event_totaleMouseClicked

    private void table2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table2MouseClicked
        model=(DefaultTableModel) table2.getModel();
        int SelectedRows=table2.getSelectedRow();
        z.setText(table2.getValueAt(SelectedRows, 0).toString());
        label.setText(table2.getValueAt(SelectedRows, 1).toString());
        yyyear.setText(table2.getValueAt(SelectedRows, 2).toString());
        lbel.setText(table2.getValueAt(SelectedRows, 3).toString()); 
    }//GEN-LAST:event_table2MouseClicked

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser15.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker15.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser16.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker16.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j64.getText());
        int total_price=diff_days*price ;
           
        j60.setText(String.valueOf(total_price));
        
        // Check for overlapping reservations
       
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker16.getTime().isBefore(timePicker15.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
         if (checkForOverlappingReservations(j62.getText(), datepick, datepick2)) {
            JOptionPane.showMessageDialog(null, "This car is already reserved during the selected dates");
            return;
        }
        else{
           String q= "INSERT INTO `reserve`(`Date_1`,`Date_2`,`Time_1`,`Time_2`,`Car_Model`, `user_id`) VALUES ('"+datepickk+"','"+datepick2+"','"+timePicke+"','"+timePicke2+"','"+j62.getText()+"','"+user_id+"')";
           PreparedStatement pst=con.prepareStatement(q);
           pst.execute();
           JOptionPane.showMessageDialog(null, "Please save the following QR Code in oreder to show it to us when taking the car!");
           
           String qrData= "Start date: "+ datepickk+" End date: "+datepick2+" Start time: "+ timePicke+" End time: "+timePicke2+" User id: "+user_id+" Car model: "+j62.getText()+ " Total Price: "+total_price;
           BufferedImage qrCodeImage= generateQRCode(qrData);
           JFrame qrCodeFrame = new JFrame("QR Code");
    qrCodeFrame.setSize(400, 400);
    qrCodeFrame.setLocationRelativeTo(null);
    qrCodeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    JPanel qrCodePanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(qrCodeImage, 75, 75, null);
        }
    };  
    qrCodeFrame.add(qrCodePanel);
    qrCodeFrame.setVisible(true);
        }
         
        
                
                }catch(Exception e){
            System.out.println("The error is: "+ e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
       
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
         try {
        String query = "SELECT * FROM `Sedan_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table11.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         try {
        String query = "SELECT * FROM `SUV_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table12.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
         try {
        String query = "SELECT * FROM `Luxury_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table13.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
         try {
        String query = "SELECT * FROM `Cabrio_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table14.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
         try {
        String query = "SELECT * FROM `Sport_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table15.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
         try {
        String query = "SELECT * FROM `Electric_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table16.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
    }//GEN-LAST:event_jButton15ActionPerformed

    private void table11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table11MouseClicked
        model=(DefaultTableModel) table11.getModel();
        int SelectedRows=table11.getSelectedRow();
        j11.setText(table11.getValueAt(SelectedRows, 0).toString());
        j12.setText(table11.getValueAt(SelectedRows, 1).toString());
        j13.setText(table11.getValueAt(SelectedRows, 2).toString());
        j14.setText(table11.getValueAt(SelectedRows, 3).toString()); 
    }//GEN-LAST:event_table11MouseClicked

    private void table12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table12MouseClicked
       model=(DefaultTableModel) table12.getModel();
        int SelectedRows=table12.getSelectedRow();
        j21.setText(table12.getValueAt(SelectedRows, 0).toString());
        j22.setText(table12.getValueAt(SelectedRows, 1).toString());
        j23.setText(table12.getValueAt(SelectedRows, 2).toString());
        j24.setText(table12.getValueAt(SelectedRows, 3).toString()); 
    }//GEN-LAST:event_table12MouseClicked

    private void table13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table13MouseClicked
        model=(DefaultTableModel) table13.getModel();
        int SelectedRows=table13.getSelectedRow();
        j31.setText(table13.getValueAt(SelectedRows, 0).toString());
        j32.setText(table13.getValueAt(SelectedRows, 1).toString());
        j33.setText(table13.getValueAt(SelectedRows, 2).toString());
        j34.setText(table13.getValueAt(SelectedRows, 3).toString()); 
    }//GEN-LAST:event_table13MouseClicked

    private void table14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table14MouseClicked
        model=(DefaultTableModel) table14.getModel();
        int SelectedRows=table14.getSelectedRow();
        j41.setText(table14.getValueAt(SelectedRows, 0).toString());
        j42.setText(table14.getValueAt(SelectedRows, 1).toString());
        j43.setText(table14.getValueAt(SelectedRows, 2).toString());
        j44.setText(table14.getValueAt(SelectedRows, 3).toString()); 
    }//GEN-LAST:event_table14MouseClicked

    private void table15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table15MouseClicked
        model=(DefaultTableModel) table15.getModel();
        int SelectedRows=table15.getSelectedRow();
        j51.setText(table15.getValueAt(SelectedRows, 0).toString());
        j52.setText(table15.getValueAt(SelectedRows, 1).toString());
        j53.setText(table15.getValueAt(SelectedRows, 2).toString());
        j54.setText(table15.getValueAt(SelectedRows, 3).toString()); 
    }//GEN-LAST:event_table15MouseClicked

    private void table16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table16MouseClicked
        model=(DefaultTableModel) table16.getModel();
        int SelectedRows=table16.getSelectedRow();
        j61.setText(table16.getValueAt(SelectedRows, 0).toString());
        j62.setText(table16.getValueAt(SelectedRows, 1).toString());
        j63.setText(table16.getValueAt(SelectedRows, 2).toString());
        j64.setText(table16.getValueAt(SelectedRows, 3).toString()); 
    }//GEN-LAST:event_table16MouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick11=dateFormat.format(jDateChooser7.getDate());
        Date datepickk11=dateFormat.parse(datepick11);//pickupdate
       
        String timePicke11=timePicker7.getText();//picktime
        
        String datepick211=dateFormat.format(jDateChooser8.getDate());
        Date datepick2_11=dateFormat.parse(datepick211);//dropoffdate
        String timePicke211=timePicker8.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_11.getTime() - datepickk11.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j14.getText());
        int total_price=diff_days*price ;
           
        j10.setText(String.valueOf(total_price));
        
        // Check for overlapping reservations
       
        
        if(datepick2_11.before(datepickk11)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker8.getTime().isBefore(timePicker7.getTime()) && datepick2_11.equals(datepickk11)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
         if (checkForOverlappingReservations(j12.getText(), datepick11, datepick211)) {
            JOptionPane.showMessageDialog(null, "This car is already reserved during the selected dates");
            return;
        }
        else{
           String q= "INSERT INTO `reserve`(`Date_1`,`Date_2`,`Time_1`,`Time_2`,`Car_Model`, `user_id`) VALUES ('"+datepickk11+"','"+datepick211+"','"+timePicke11+"','"+timePicke211+"','"+j12.getText()+"','"+user_id+"')";
           PreparedStatement pst=con.prepareStatement(q);
           pst.execute();
           JOptionPane.showMessageDialog(null, "Please save the following QR Code in oreder to show it to us when taking the car!");
           
           String qrData= "Start date: "+ datepickk11+" End date: "+datepick211+" Start time: "+ timePicke11+" End time: "+timePicke211+" User id: "+user_id+" Car model: "+j12.getText()+ " Total Price: "+total_price;
           BufferedImage qrCodeImage= generateQRCode(qrData);
           JFrame qrCodeFrame = new JFrame("QR Code");
    qrCodeFrame.setSize(400, 400);
    qrCodeFrame.setLocationRelativeTo(null);
    qrCodeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    JPanel qrCodePanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(qrCodeImage, 75, 75, null);
        }
    };  
    qrCodeFrame.add(qrCodePanel);
    qrCodeFrame.setVisible(true);
        }
         
        
                
                }catch(Exception e){
            System.out.println("The error is: "+ e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
        
        
        
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void j10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j10MouseClicked
         try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser7.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker7.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser8.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker8.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j14.getText());
        int total_price=diff_days*price ;
           
        j10.setText(String.valueOf(total_price));
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker8.getTime().isBefore(timePicker7.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
       }catch(Exception e){
                System.out.println("The error is: "+ e);
                }
                                  

    }//GEN-LAST:event_j10MouseClicked

    private void j20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j20MouseClicked
         try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser5.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker5.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser6.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker6.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j24.getText());
        int total_price=diff_days*price ;
           
        j20.setText(String.valueOf(total_price));
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker6.getTime().isBefore(timePicker5.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
       }catch(Exception e){
                System.out.println("The error is: "+ e);
                }
                                 

    }//GEN-LAST:event_j20MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser5.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker5.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser6.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker6.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j24.getText());
        int total_price=diff_days*price ;
           
        j20.setText(String.valueOf(total_price));
        
        // Check for overlapping reservations
       
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker6.getTime().isBefore(timePicker5.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
         if (checkForOverlappingReservations(j22.getText(), datepick, datepick2)) {
            JOptionPane.showMessageDialog(null, "This car is already reserved during the selected dates");
            return;
        }
        else{
           String q= "INSERT INTO `reserve`(`Date_1`,`Date_2`,`Time_1`,`Time_2`,`Car_Model`, `user_id`) VALUES ('"+datepickk+"','"+datepick2+"','"+timePicke+"','"+timePicke2+"','"+j22.getText()+"','"+user_id+"')";
           PreparedStatement pst=con.prepareStatement(q);
           pst.execute();
           JOptionPane.showMessageDialog(null, "Please save the following QR Code in oreder to show it to us when taking the car!");
           
           String qrData= "Start date: "+ datepickk+" End date: "+datepick2+" Start time: "+ timePicke+" End time: "+timePicke2+" User id: "+user_id+" Car model: "+j22.getText()+ " Total Price: "+total_price;
           BufferedImage qrCodeImage= generateQRCode(qrData);
           JFrame qrCodeFrame = new JFrame("QR Code");
    qrCodeFrame.setSize(400, 400);
    qrCodeFrame.setLocationRelativeTo(null);
    qrCodeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    JPanel qrCodePanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(qrCodeImage, 75, 75, null);
        }
    };  
    qrCodeFrame.add(qrCodePanel);
    qrCodeFrame.setVisible(true);
        }
         
        
                
                }catch(Exception e){
            System.out.println("The error is: "+ e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
       try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser9.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker9.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser10.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker10.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j34.getText());
        int total_price=diff_days*price ;
           
        j30.setText(String.valueOf(total_price));
        
        // Check for overlapping reservations
       
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker10.getTime().isBefore(timePicker9.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
         if (checkForOverlappingReservations(j32.getText(), datepick, datepick2)) {
            JOptionPane.showMessageDialog(null, "This car is already reserved during the selected dates");
            return;
        }
        else{
           String q= "INSERT INTO `reserve`(`Date_1`,`Date_2`,`Time_1`,`Time_2`,`Car_Model`, `user_id`) VALUES ('"+datepickk+"','"+datepick2+"','"+timePicke+"','"+timePicke2+"','"+j32.getText()+"','"+user_id+"')";
           PreparedStatement pst=con.prepareStatement(q);
           pst.execute();
           JOptionPane.showMessageDialog(null, "Please save the following QR Code in oreder to show it to us when taking the car!");
           
           String qrData= "Start date: "+ datepickk+" End date: "+datepick2+" Start time: "+ timePicke+" End time: "+timePicke2+" User id: "+user_id+" Car model: "+j32.getText()+ " Total Price: "+total_price;
           BufferedImage qrCodeImage= generateQRCode(qrData);
           JFrame qrCodeFrame = new JFrame("QR Code");
    qrCodeFrame.setSize(400, 400);
    qrCodeFrame.setLocationRelativeTo(null);
    qrCodeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    JPanel qrCodePanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(qrCodeImage, 75, 75, null);
        }
    };  
    qrCodeFrame.add(qrCodePanel);
    qrCodeFrame.setVisible(true);
        }
         
        
                
                }catch(Exception e){
            System.out.println("The error is: "+ e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
        
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser11.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker11.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser12.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker12.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j44.getText());
        int total_price=diff_days*price ;
           
        j40.setText(String.valueOf(total_price));
        
        // Check for overlapping reservations
       
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker12.getTime().isBefore(timePicker11.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
         if (checkForOverlappingReservations(j42.getText(), datepick, datepick2)) {
            JOptionPane.showMessageDialog(null, "This car is already reserved during the selected dates");
            return;
        }
        else{
           String q= "INSERT INTO `reserve`(`Date_1`,`Date_2`,`Time_1`,`Time_2`,`Car_Model`, `user_id`) VALUES ('"+datepickk+"','"+datepick2+"','"+timePicke+"','"+timePicke2+"','"+j42.getText()+"','"+user_id+"')";
           PreparedStatement pst=con.prepareStatement(q);
           pst.execute();
           JOptionPane.showMessageDialog(null, "Please save the following QR Code in oreder to show it to us when taking the car!");
           
           String qrData= "Start date: "+ datepickk+" End date: "+datepick2+" Start time: "+ timePicke+" End time: "+timePicke2+" User id: "+user_id+" Car model: "+j42.getText()+ " Total Price: "+total_price;
           BufferedImage qrCodeImage= generateQRCode(qrData);
           JFrame qrCodeFrame = new JFrame("QR Code");
    qrCodeFrame.setSize(400, 400);
    qrCodeFrame.setLocationRelativeTo(null);
    qrCodeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    JPanel qrCodePanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(qrCodeImage, 75, 75, null);
        }
    };  
    qrCodeFrame.add(qrCodePanel);
    qrCodeFrame.setVisible(true);
        }
         
        
                
                }catch(Exception e){
            System.out.println("The error is: "+ e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
        
    }//GEN-LAST:event_jButton12ActionPerformed

    private void j40MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j40MouseClicked
        try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser11.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker11.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser12.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker12.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j44.getText());
        int total_price=diff_days*price ;
           
        j40.setText(String.valueOf(total_price));
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker12.getTime().isBefore(timePicker11.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
       }catch(Exception e){
                System.out.println("The error is: "+ e);
                }

    }//GEN-LAST:event_j40MouseClicked

    private void j30MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j30MouseClicked
       try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser9.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker9.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser10.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker10.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j34.getText());
        int total_price=diff_days*price ;
           
        j30.setText(String.valueOf(total_price));
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker10.getTime().isBefore(timePicker9.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
       }catch(Exception e){
                System.out.println("The error is: "+ e);
                }

    }//GEN-LAST:event_j30MouseClicked

    private void j50MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j50MouseClicked
        try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser13.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker13.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser14.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker14.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j54.getText());
        int total_price=diff_days*price ;
           
        j50.setText(String.valueOf(total_price));
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker14.getTime().isBefore(timePicker13.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
       }catch(Exception e){
                System.out.println("The error is: "+ e);
                }

    }//GEN-LAST:event_j50MouseClicked

    private void j60MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j60MouseClicked
       try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser15.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker15.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser16.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker16.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j64.getText());
        int total_price=diff_days*price ;
           
        j60.setText(String.valueOf(total_price));
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker16.getTime().isBefore(timePicker15.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
       }catch(Exception e){
                System.out.println("The error is: "+ e);
                }

    }//GEN-LAST:event_j60MouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        try{
        SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd");
        
        String datepick=dateFormat.format(jDateChooser13.getDate());
        Date datepickk=dateFormat.parse(datepick);//pickupdate
       
        String timePicke=timePicker13.getText();//picktime
        
        String datepick2=dateFormat.format(jDateChooser14.getDate());
        Date datepick2_=dateFormat.parse(datepick2);//dropoffdate
        String timePicke2=timePicker14.getText();//dropofftime
        
        
        
        //get the date difference in days
        long diff=datepick2_.getTime() - datepickk.getTime();
            
            
            int diff_days= (int) (diff / 1000 / 60 / 60 / 24);
            
            
            int price=Integer.valueOf(j54.getText());
        int total_price=diff_days*price ;
           
        j50.setText(String.valueOf(total_price));
        
        // Check for overlapping reservations
       
        
        if(datepick2_.before(datepickk)){
           
          JOptionPane.showMessageDialog(null, "dropoff date must be after pickup");  
        }
      
            
        if(timePicker14.getTime().isBefore(timePicker13.getTime()) && datepick2_.equals(datepickk)){
                JOptionPane.showMessageDialog(null, "dropoff time must be after pickup");
            }
         if (checkForOverlappingReservations(j52.getText(), datepick, datepick2)) {
            JOptionPane.showMessageDialog(null, "This car is already reserved during the selected dates");
            return;
        }
        else{
           String q= "INSERT INTO `reserve`(`Date_1`,`Date_2`,`Time_1`,`Time_2`,`Car_Model`, `user_id`) VALUES ('"+datepickk+"','"+datepick2+"','"+timePicke+"','"+timePicke2+"','"+j52.getText()+"','"+user_id+"')";
           PreparedStatement pst=con.prepareStatement(q);
           pst.execute();
           JOptionPane.showMessageDialog(null, "Please save the following QR Code in oreder to show it to us when taking the car!");
           
           String qrData= "Start date: "+ datepickk+" End date: "+datepick2+" Start time: "+ timePicke+" End time: "+timePicke2+" User id: "+user_id+" Car model: "+j52.getText()+ " Total Price: "+total_price;
           BufferedImage qrCodeImage= generateQRCode(qrData);
           JFrame qrCodeFrame = new JFrame("QR Code");
    qrCodeFrame.setSize(400, 400);
    qrCodeFrame.setLocationRelativeTo(null);
    qrCodeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    JPanel qrCodePanel = new JPanel() {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(qrCodeImage, 75, 75, null);
        }
    };  
    qrCodeFrame.add(qrCodePanel);
    qrCodeFrame.setVisible(true);
        }
         
        
                
                }catch(Exception e){
            System.out.println("The error is: "+ e);
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }

    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        MAINUS M= new MAINUS(user_id);
        M.show();
        dispose();
    }//GEN-LAST:event_jButton17ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new test().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel a;
    private javax.swing.JLabel b;
    private javax.swing.JLabel c;
    private javax.swing.JLabel d;
    private javax.swing.JLabel e;
    private javax.swing.JLabel j10;
    private javax.swing.JLabel j11;
    private javax.swing.JLabel j12;
    private javax.swing.JLabel j13;
    private javax.swing.JLabel j14;
    private javax.swing.JLabel j20;
    private javax.swing.JLabel j21;
    private javax.swing.JLabel j22;
    private javax.swing.JLabel j23;
    private javax.swing.JLabel j24;
    private javax.swing.JLabel j30;
    private javax.swing.JLabel j31;
    private javax.swing.JLabel j32;
    private javax.swing.JLabel j33;
    private javax.swing.JLabel j34;
    private javax.swing.JLabel j40;
    private javax.swing.JLabel j41;
    private javax.swing.JLabel j42;
    private javax.swing.JLabel j43;
    private javax.swing.JLabel j44;
    private javax.swing.JLabel j50;
    private javax.swing.JLabel j51;
    private javax.swing.JLabel j52;
    private javax.swing.JLabel j53;
    private javax.swing.JLabel j54;
    private javax.swing.JLabel j60;
    private javax.swing.JLabel j61;
    private javax.swing.JLabel j62;
    private javax.swing.JLabel j63;
    private javax.swing.JLabel j64;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser10;
    private com.toedter.calendar.JDateChooser jDateChooser11;
    private com.toedter.calendar.JDateChooser jDateChooser12;
    private com.toedter.calendar.JDateChooser jDateChooser13;
    private com.toedter.calendar.JDateChooser jDateChooser14;
    private com.toedter.calendar.JDateChooser jDateChooser15;
    private com.toedter.calendar.JDateChooser jDateChooser16;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private com.toedter.calendar.JDateChooser jDateChooser4;
    private com.toedter.calendar.JDateChooser jDateChooser5;
    private com.toedter.calendar.JDateChooser jDateChooser6;
    private com.toedter.calendar.JDateChooser jDateChooser7;
    private com.toedter.calendar.JDateChooser jDateChooser8;
    private com.toedter.calendar.JDateChooser jDateChooser9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel label;
    private javax.swing.JLabel lbel;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private java.awt.Panel panel3;
    private java.awt.Panel panel4;
    private java.awt.Panel panel5;
    private java.awt.Panel panel6;
    private java.awt.Panel panel7;
    private java.awt.Panel panel8;
    private javax.swing.JTable table;
    private javax.swing.JTable table11;
    private javax.swing.JTable table12;
    private javax.swing.JTable table13;
    private javax.swing.JTable table14;
    private javax.swing.JTable table15;
    private javax.swing.JTable table16;
    private javax.swing.JTable table2;
    private java.awt.TextArea textArea1;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    private com.github.lgooddatepicker.components.TimePicker timePicker10;
    private com.github.lgooddatepicker.components.TimePicker timePicker11;
    private com.github.lgooddatepicker.components.TimePicker timePicker12;
    private com.github.lgooddatepicker.components.TimePicker timePicker13;
    private com.github.lgooddatepicker.components.TimePicker timePicker14;
    private com.github.lgooddatepicker.components.TimePicker timePicker15;
    private com.github.lgooddatepicker.components.TimePicker timePicker16;
    private com.github.lgooddatepicker.components.TimePicker timePicker2;
    private com.github.lgooddatepicker.components.TimePicker timePicker3;
    private com.github.lgooddatepicker.components.TimePicker timePicker4;
    private com.github.lgooddatepicker.components.TimePicker timePicker5;
    private com.github.lgooddatepicker.components.TimePicker timePicker6;
    private com.github.lgooddatepicker.components.TimePicker timePicker7;
    private com.github.lgooddatepicker.components.TimePicker timePicker8;
    private com.github.lgooddatepicker.components.TimePicker timePicker9;
    private javax.swing.JLabel totale;
    private javax.swing.JLabel yyyear;
    private javax.swing.JLabel z;
    // End of variables declaration//GEN-END:variables

    private boolean checkForOverlappingReservations(String carModel, String startDate, String endDate) {
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        // Convert start and end dates to Date objects
        Date start = dateFormat.parse(startDate);
        Date end = dateFormat.parse(endDate);

         String query = "SELECT * FROM reserve WHERE Car_Model = ? AND ((Date_1 <= ? AND Date_2 >= ?) OR (Date_1 <= ? AND Date_2 >= ?) OR (Date_1 >= ? AND Date_1 <= ?) OR (Date_2 >= ? AND Date_2 <= ?))";
        PreparedStatement pst = con.prepareStatement(query);
        pst.setString(1, carModel);
        pst.setDate(2, new java.sql.Date(start.getTime()));
        pst.setDate(3, new java.sql.Date(start.getTime()));
        pst.setDate(4, new java.sql.Date(end.getTime()));
        pst.setDate(5, new java.sql.Date(end.getTime()));
        pst.setDate(6, new java.sql.Date(start.getTime()));
        pst.setDate(7, new java.sql.Date(end.getTime()));
        pst.setDate(8, new java.sql.Date(start.getTime()));
        pst.setDate(9, new java.sql.Date(end.getTime()));
        
        ResultSet rs = pst.executeQuery();

        return rs.next(); // true if there are overlapping reservations, false otherwise

    } catch (Exception e) {
        System.out.println("Error checking for overlapping reservations: " + e);
        return false;
    }
}

    
    
    
    private BufferedImage generateQRCode(String data) {
    int qrCodeSize = 250;
    Map<EncodeHintType, Object> hints = new HashMap<>();
    hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");

    try {
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrCodeWriter.encode(data, BarcodeFormat.QR_CODE, qrCodeSize, qrCodeSize, hints);

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        MatrixToImageWriter.writeToStream(bitMatrix, "PNG", outputStream);
        byte[] qrCodeBytes = outputStream.toByteArray();

        return ImageIO.read(new ByteArrayInputStream(qrCodeBytes));
    } catch (WriterException | IOException e) {
        e.printStackTrace();
    }

    return null;
}

}
   
