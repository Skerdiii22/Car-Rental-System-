/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FORYOU;

import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
/**
 *
 * @author user
 */
public class CARADMIN extends javax.swing.JFrame {
Connection con= null;
ResultSet rs=null;
DefaultTableModel model = null;
PreparedStatement pst= null;
DefaultTableModel model1 = null;
DefaultTableModel model2 = null;
DefaultTableModel model3 = null;
DefaultTableModel model4 = null;
    /**
     * Creates new form CARADMIN
     */
    public CARADMIN() {
        initComponents();
        con=DBConnection.connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table3 = new javax.swing.JTable();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        table4 = new javax.swing.JTable();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        table5 = new javax.swing.JTable();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        table6 = new javax.swing.JTable();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        table7 = new javax.swing.JTable();
        jButton29 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 28)); // NOI18N
        jLabel1.setText("Orskyan Admin Page");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.setText("Display Cars");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton2.setText("Add new Car");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton3.setText("Update Car");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton4.setText("Delete Car");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jButton1)
                        .addGap(34, 34, 34)
                        .addComponent(jButton2)
                        .addGap(39, 39, 39)
                        .addComponent(jButton3)
                        .addGap(29, 29, 29)
                        .addComponent(jButton4)))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Economic Cars", jPanel1);

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(table1);

        jButton5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton5.setText("Display Cars");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton6.setText("Add new Car");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton7.setText("Update Car");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton8.setText("Delete Car");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jButton5)
                        .addGap(36, 36, 36)
                        .addComponent(jButton6)
                        .addGap(36, 36, 36)
                        .addComponent(jButton7)
                        .addGap(37, 37, 37)
                        .addComponent(jButton8)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Compact Cars", jPanel2);

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(table2);

        jButton9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton9.setText("Display Cars");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton10.setText("Add new Car");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton11.setText("Update Car");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton12.setText("Delete Car");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jButton9)
                        .addGap(34, 34, 34)
                        .addComponent(jButton10)
                        .addGap(29, 29, 29)
                        .addComponent(jButton11)
                        .addGap(38, 38, 38)
                        .addComponent(jButton12)))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sedans", jPanel3);

        table3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(table3);

        jButton13.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton13.setText("Display Cars");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton14.setText("Add new Car");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton15.setText("Update Car");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton16.setText("Delete Car");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(59, 59, 59)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jButton13)
                .addGap(55, 55, 55)
                .addComponent(jButton14)
                .addGap(49, 49, 49)
                .addComponent(jButton15)
                .addGap(52, 52, 52)
                .addComponent(jButton16)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SUVs", jPanel4);

        table4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(table4);

        jButton17.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton17.setText("Display Cars");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton18.setText("Add new Car");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton19.setText("Update Car");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton20.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton20.setText("Delete Car");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jButton17)
                        .addGap(36, 36, 36)
                        .addComponent(jButton18)
                        .addGap(36, 36, 36)
                        .addComponent(jButton19)
                        .addGap(35, 35, 35)
                        .addComponent(jButton20)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Luxury Cars", jPanel5);

        table5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(table5);

        jButton21.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton21.setText("Display Cars");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton22.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton22.setText("Add new Car");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton23.setText("Update Car");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton24.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton24.setText("Delete Car");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jButton21)
                        .addGap(42, 42, 42)
                        .addComponent(jButton22)
                        .addGap(47, 47, 47)
                        .addComponent(jButton23)
                        .addGap(41, 41, 41)
                        .addComponent(jButton24)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cabriolet", jPanel6);

        table6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(table6);

        jButton25.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton25.setText("Display Cars");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jButton26.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton26.setText("Add new Car");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton27.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton27.setText("Update Car");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jButton28.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton28.setText("Delete Car");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton25)
                    .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jButton25)
                        .addGap(48, 48, 48)
                        .addComponent(jButton26)
                        .addGap(49, 49, 49)
                        .addComponent(jButton27)
                        .addGap(49, 49, 49)
                        .addComponent(jButton28)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sportive Cars", jPanel7);

        table7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(table7);

        jButton29.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton29.setText("Display Cars");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jButton30.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton30.setText("Add new Car");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jButton31.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton31.setText("Update Car");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        jButton32.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton32.setText("Delete Car");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(51, 51, 51)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jButton29)
                        .addGap(40, 40, 40)
                        .addComponent(jButton30)
                        .addGap(41, 41, 41)
                        .addComponent(jButton31)
                        .addGap(43, 43, 43)
                        .addComponent(jButton32)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Electric Cars", jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(587, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
       try {
        String query = "SELECT * FROM `Economy_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
           
       
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         try {
        // Prompt the user to enter car details
        String make = JOptionPane.showInputDialog(this, "Enter make:");
        String model = JOptionPane.showInputDialog(this, "Enter model:");
        String year = JOptionPane.showInputDialog(this, "Enter year:");
        String price = JOptionPane.showInputDialog(this, "Enter price:");

        // Create the INSERT query
        String query = "INSERT INTO Economy_Cars (make, model, year, price) VALUES (?, ?, ?, ?)";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, make);
        statement.setString(2, model);
        statement.setString(3, year);
        statement.setString(4, price);

        // Execute the query
        int rowsInserted = statement.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Car added successfully!");
            
            // Get the updated data from the database and update the JTable
            String selectQuery = "SELECT * FROM Economy_Cars";
            java.sql.Statement selectStatement = con.createStatement();
            ResultSet rs = selectStatement.executeQuery(selectQuery);

            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int cols = rsmd.getColumnCount();
            String[] colname = new String[cols];

            for (int i = 0; i < cols; i++) {
                colname[i] = rsmd.getColumnName(i + 1);
            }

            DefaultTableModel model2 = new DefaultTableModel(colname, 0);

            while (rs.next()) {
                Object[] row = new Object[cols];
                for (int i = 0; i < cols; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model2.addRow(row);
            }

            table.setModel(model2);

            rs.close();
            selectStatement.close();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while adding a car to the database", "Error", JOptionPane.ERROR_MESSAGE);
    }

        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       int selectedRow = table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the existing values from the selected row
        Object idObj = table.getValueAt(selectedRow, 0);
        Object makeObj = table.getValueAt(selectedRow, 1);
        Object modelObj = table.getValueAt(selectedRow, 2);
        Object yearObj = table.getValueAt(selectedRow, 3);
        Object priceObj = table.getValueAt(selectedRow, 4);

        // Check for null values
        String id = (idObj != null) ? idObj.toString() : "";
        String make = (makeObj != null) ? makeObj.toString() : "";
        String model = (modelObj != null) ? modelObj.toString() : "";
        String year = (yearObj != null) ? yearObj.toString() : "";
        String price = (priceObj != null) ? priceObj.toString() : "";

        // Prompt the user to enter new values
        String newMake = JOptionPane.showInputDialog(this, "Enter new make:", make);
        String newModel = JOptionPane.showInputDialog(this, "Enter new model:", model);
        String newYear = JOptionPane.showInputDialog(this, "Enter new year:", year);
        String newPrice = JOptionPane.showInputDialog(this, "Enter new price:", price);

        // Create the UPDATE query
        String query = "UPDATE Economy_Cars SET make = ?, model = ?, year = ?, price = ? WHERE id = ?";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, newMake);
        statement.setString(2, newModel);
        statement.setString(3, newYear);
        statement.setString(4, newPrice);
        statement.setString(5, id);

        // Execute the query
        int rowsUpdated = statement.executeUpdate();

        // Close the statement
        statement.close();
        
        if (rowsUpdated > 0) {
            // Update the corresponding cell in the JTable with the new value
            table.setValueAt(newMake, selectedRow, 1);
            table.setValueAt(newModel, selectedRow, 2);
            table.setValueAt(newYear, selectedRow, 3);
            table.setValueAt(newPrice, selectedRow, 4);

            JOptionPane.showMessageDialog(this, "Car updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update car.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while updating the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }

        
      
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int selectedRow = table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the selected car's ID from the JTable
        String id = table.getValueAt(selectedRow, 0).toString();

        // Create the DELETE query
        String query = "DELETE FROM Economy_Cars WHERE id = ?";

        // Prepare the statement and set the parameter value
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, id);

        // Execute the query
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            // Remove the deleted row from the JTable
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
        String query = "SELECT * FROM `Sedan_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table2.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    

        
        
        
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
        String query = "SELECT * FROM `Compact_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table1.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
        // Prompt the user to enter car details
        String make = JOptionPane.showInputDialog(this, "Enter make:");
        String model = JOptionPane.showInputDialog(this, "Enter model:");
        String year = JOptionPane.showInputDialog(this, "Enter year:");
        String price = JOptionPane.showInputDialog(this, "Enter price:");

        // Create the INSERT query
        String query = "INSERT INTO Compact_Cars (make, model, year, price) VALUES (?, ?, ?, ?)";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, make);
        statement.setString(2, model);
        statement.setString(3, year);
        statement.setString(4, price);

        // Execute the query
        int rowsInserted = statement.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Car added successfully!");
            
            // Get the updated data from the database and update the JTable
            String selectQuery = "SELECT * FROM Compact_Cars";
            java.sql.Statement selectStatement = con.createStatement();
            ResultSet rs = selectStatement.executeQuery(selectQuery);

            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int cols = rsmd.getColumnCount();
            String[] colname = new String[cols];

            for (int i = 0; i < cols; i++) {
                colname[i] = rsmd.getColumnName(i + 1);
            }

            DefaultTableModel model3 = new DefaultTableModel(colname, 0);

            while (rs.next()) {
                Object[] row = new Object[cols];
                for (int i = 0; i < cols; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model3.addRow(row);
            }

            table1.setModel(model3);

            rs.close();
            selectStatement.close();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while adding a car to the database", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int selectedRow = table1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the existing values from the selected row
        Object idObj = table1.getValueAt(selectedRow, 0);
        Object makeObj = table1.getValueAt(selectedRow, 1);
        Object modelObj = table1.getValueAt(selectedRow, 2);
        Object yearObj = table1.getValueAt(selectedRow, 3);
        Object priceObj = table1.getValueAt(selectedRow, 4);

        // Check for null values
        String id = (idObj != null) ? idObj.toString() : "";
        String make = (makeObj != null) ? makeObj.toString() : "";
        String model = (modelObj != null) ? modelObj.toString() : "";
        String year = (yearObj != null) ? yearObj.toString() : "";
        String price = (priceObj != null) ? priceObj.toString() : "";

        // Prompt the user to enter new values
        String newMake = JOptionPane.showInputDialog(this, "Enter new make:", make);
        String newModel = JOptionPane.showInputDialog(this, "Enter new model:", model);
        String newYear = JOptionPane.showInputDialog(this, "Enter new year:", year);
        String newPrice = JOptionPane.showInputDialog(this, "Enter new price:", price);

        // Create the UPDATE query
        String query = "UPDATE Compact_Cars SET make = ?, model = ?, year = ?, price = ? WHERE id = ?";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, newMake);
        statement.setString(2, newModel);
        statement.setString(3, newYear);
        statement.setString(4, newPrice);
        statement.setString(5, id);

        // Execute the query
        int rowsUpdated = statement.executeUpdate();

        // Close the statement
        statement.close();
        
        if (rowsUpdated > 0) {
            // Update the corresponding cell in the JTable with the new value
            table1.setValueAt(newMake, selectedRow, 1);
            table1.setValueAt(newModel, selectedRow, 2);
            table1.setValueAt(newYear, selectedRow, 3);
            table1.setValueAt(newPrice, selectedRow, 4);

            JOptionPane.showMessageDialog(this, "Car updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update car.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while updating the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }

        
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

       int selectedRow = table1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the selected car's ID from the JTable
        String id = table1.getValueAt(selectedRow, 0).toString();

        // Create the DELETE query
        String query = "DELETE FROM Compact_Cars WHERE id = ?";

        // Prepare the statement and set the parameter value
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, id);

        // Execute the query
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            // Remove the deleted row from the JTable
            DefaultTableModel model = (DefaultTableModel) table1.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
        // Prompt the user to enter car details
        String make = JOptionPane.showInputDialog(this, "Enter make:");
        String model = JOptionPane.showInputDialog(this, "Enter model:");
        String year = JOptionPane.showInputDialog(this, "Enter year:");
        String price = JOptionPane.showInputDialog(this, "Enter price:");

        // Create the INSERT query
        String query = "INSERT INTO Sedan_Cars (make, model, year, price) VALUES (?, ?, ?, ?)";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, make);
        statement.setString(2, model);
        statement.setString(3, year);
        statement.setString(4, price);

        // Execute the query
        int rowsInserted = statement.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Car added successfully!");
            
            // Get the updated data from the database and update the JTable
            String selectQuery = "SELECT * FROM Sedan_Cars";
            java.sql.Statement selectStatement = con.createStatement();
            ResultSet rs = selectStatement.executeQuery(selectQuery);

            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int cols = rsmd.getColumnCount();
            String[] colname = new String[cols];

            for (int i = 0; i < cols; i++) {
                colname[i] = rsmd.getColumnName(i + 1);
            }

            DefaultTableModel model4 = new DefaultTableModel(colname, 0);

            while (rs.next()) {
                Object[] row = new Object[cols];
                for (int i = 0; i < cols; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model4.addRow(row);
            }

            table2.setModel(model4);

            rs.close();
            selectStatement.close();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while adding a car to the database", "Error", JOptionPane.ERROR_MESSAGE);
    }



        
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        
        int selectedRow = table2.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the existing values from the selected row
        Object idObj = table2.getValueAt(selectedRow, 0);
        Object makeObj = table2.getValueAt(selectedRow, 1);
        Object modelObj = table2.getValueAt(selectedRow, 2);
        Object yearObj = table2.getValueAt(selectedRow, 3);
        Object priceObj = table2.getValueAt(selectedRow, 4);

        // Check for null values
        String id = (idObj != null) ? idObj.toString() : "";
        String make = (makeObj != null) ? makeObj.toString() : "";
        String model = (modelObj != null) ? modelObj.toString() : "";
        String year = (yearObj != null) ? yearObj.toString() : "";
        String price = (priceObj != null) ? priceObj.toString() : "";

        // Prompt the user to enter new values
        String newMake = JOptionPane.showInputDialog(this, "Enter new make:", make);
        String newModel = JOptionPane.showInputDialog(this, "Enter new model:", model);
        String newYear = JOptionPane.showInputDialog(this, "Enter new year:", year);
        String newPrice = JOptionPane.showInputDialog(this, "Enter new price:", price);

        // Create the UPDATE query
        String query = "UPDATE Sedan_Cars SET make = ?, model = ?, year = ?, price = ? WHERE id = ?";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, newMake);
        statement.setString(2, newModel);
        statement.setString(3, newYear);
        statement.setString(4, newPrice);
        statement.setString(5, id);

        // Execute the query
        int rowsUpdated = statement.executeUpdate();

        // Close the statement
        statement.close();
        
        if (rowsUpdated > 0) {
            // Update the corresponding cell in the JTable with the new value
            table2.setValueAt(newMake, selectedRow, 1);
            table2.setValueAt(newModel, selectedRow, 2);
            table2.setValueAt(newYear, selectedRow, 3);
            table2.setValueAt(newPrice, selectedRow, 4);

            JOptionPane.showMessageDialog(this, "Car updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update car.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while updating the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        
        int selectedRow = table2.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the selected car's ID from the JTable
        String id = table2.getValueAt(selectedRow, 0).toString();

        // Create the DELETE query
        String query = "DELETE FROM Sedan_Cars WHERE id = ?";

        // Prepare the statement and set the parameter value
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, id);

        // Execute the query
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            // Remove the deleted row from the JTable
            DefaultTableModel model = (DefaultTableModel) table2.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        try {
        String query = "SELECT * FROM `SUV_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table3.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    


        
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        try {
        String query = "SELECT * FROM `Luxury_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table4.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    


    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        try {
        String query = "SELECT * FROM `Cabrio_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table5.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    


    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        try {
        String query = "SELECT * FROM `Sport_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table6.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    


    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        try {
        String query = "SELECT * FROM `Electric_Cars`";
        java.sql.Statement pst = con.createStatement();
        ResultSet rs = pst.executeQuery(query);

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        while (rs.next()) {
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table7.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    


    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        try {
        // Prompt the user to enter car details
        String make = JOptionPane.showInputDialog(this, "Enter make:");
        String model = JOptionPane.showInputDialog(this, "Enter model:");
        String year = JOptionPane.showInputDialog(this, "Enter year:");
        String price = JOptionPane.showInputDialog(this, "Enter price:");

        // Create the INSERT query
        String query = "INSERT INTO SUV_Cars (make, model, year, price) VALUES (?, ?, ?, ?)";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, make);
        statement.setString(2, model);
        statement.setString(3, year);
        statement.setString(4, price);

        // Execute the query
        int rowsInserted = statement.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Car added successfully!");
            
            // Get the updated data from the database and update the JTable
            String selectQuery = "SELECT * FROM SUV_Cars";
            java.sql.Statement selectStatement = con.createStatement();
            ResultSet rs = selectStatement.executeQuery(selectQuery);

            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int cols = rsmd.getColumnCount();
            String[] colname = new String[cols];

            for (int i = 0; i < cols; i++) {
                colname[i] = rsmd.getColumnName(i + 1);
            }

            DefaultTableModel model5 = new DefaultTableModel(colname, 0);

            while (rs.next()) {
                Object[] row = new Object[cols];
                for (int i = 0; i < cols; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model5.addRow(row);
            }

            table3.setModel(model5);

            rs.close();
            selectStatement.close();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while adding a car to the database", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        try {
        // Prompt the user to enter car details
        String make = JOptionPane.showInputDialog(this, "Enter make:");
        String model = JOptionPane.showInputDialog(this, "Enter model:");
        String year = JOptionPane.showInputDialog(this, "Enter year:");
        String price = JOptionPane.showInputDialog(this, "Enter price:");

        // Create the INSERT query
        String query = "INSERT INTO Luxury_Cars (make, model, year, price) VALUES (?, ?, ?, ?)";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, make);
        statement.setString(2, model);
        statement.setString(3, year);
        statement.setString(4, price);

        // Execute the query
        int rowsInserted = statement.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Car added successfully!");
            
            // Get the updated data from the database and update the JTable
            String selectQuery = "SELECT * FROM Luxury_Cars";
            java.sql.Statement selectStatement = con.createStatement();
            ResultSet rs = selectStatement.executeQuery(selectQuery);

            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int cols = rsmd.getColumnCount();
            String[] colname = new String[cols];

            for (int i = 0; i < cols; i++) {
                colname[i] = rsmd.getColumnName(i + 1);
            }

            DefaultTableModel model6 = new DefaultTableModel(colname, 0);

            while (rs.next()) {
                Object[] row = new Object[cols];
                for (int i = 0; i < cols; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model6.addRow(row);
            }

            table4.setModel(model6);

            rs.close();
            selectStatement.close();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while adding a car to the database", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        try {
        // Prompt the user to enter car details
        String make = JOptionPane.showInputDialog(this, "Enter make:");
        String model = JOptionPane.showInputDialog(this, "Enter model:");
        String year = JOptionPane.showInputDialog(this, "Enter year:");
        String price = JOptionPane.showInputDialog(this, "Enter price:");

        // Create the INSERT query
        String query = "INSERT INTO Cabrio_Cars (make, model, year, price) VALUES (?, ?, ?, ?)";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, make);
        statement.setString(2, model);
        statement.setString(3, year);
        statement.setString(4, price);

        // Execute the query
        int rowsInserted = statement.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Car added successfully!");
            
            // Get the updated data from the database and update the JTable
            String selectQuery = "SELECT * FROM Cabrio_Cars";
            java.sql.Statement selectStatement = con.createStatement();
            ResultSet rs = selectStatement.executeQuery(selectQuery);

            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int cols = rsmd.getColumnCount();
            String[] colname = new String[cols];

            for (int i = 0; i < cols; i++) {
                colname[i] = rsmd.getColumnName(i + 1);
            }

            DefaultTableModel model8 = new DefaultTableModel(colname, 0);

            while (rs.next()) {
                Object[] row = new Object[cols];
                for (int i = 0; i < cols; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model8.addRow(row);
            }

            table5.setModel(model8);

            rs.close();
            selectStatement.close();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while adding a car to the database", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
       try {
        // Prompt the user to enter car details
        String make = JOptionPane.showInputDialog(this, "Enter make:");
        String model = JOptionPane.showInputDialog(this, "Enter model:");
        String year = JOptionPane.showInputDialog(this, "Enter year:");
        String price = JOptionPane.showInputDialog(this, "Enter price:");

        // Create the INSERT query
        String query = "INSERT INTO Sport_Cars (make, model, year, price) VALUES (?, ?, ?, ?)";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, make);
        statement.setString(2, model);
        statement.setString(3, year);
        statement.setString(4, price);

        // Execute the query
        int rowsInserted = statement.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Car added successfully!");
            
            // Get the updated data from the database and update the JTable
            String selectQuery = "SELECT * FROM Sport_Cars";
            java.sql.Statement selectStatement = con.createStatement();
            ResultSet rs = selectStatement.executeQuery(selectQuery);

            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int cols = rsmd.getColumnCount();
            String[] colname = new String[cols];

            for (int i = 0; i < cols; i++) {
                colname[i] = rsmd.getColumnName(i + 1);
            }

            DefaultTableModel model9 = new DefaultTableModel(colname, 0);

            while (rs.next()) {
                Object[] row = new Object[cols];
                for (int i = 0; i < cols; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model9.addRow(row);
            }

            table6.setModel(model9);

            rs.close();
            selectStatement.close();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while adding a car to the database", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        try {
        // Prompt the user to enter car details
        String make = JOptionPane.showInputDialog(this, "Enter make:");
        String model = JOptionPane.showInputDialog(this, "Enter model:");
        String year = JOptionPane.showInputDialog(this, "Enter year:");
        String price = JOptionPane.showInputDialog(this, "Enter price:");

        // Create the INSERT query
        String query = "INSERT INTO Electric_Cars (make, model, year, price) VALUES (?, ?, ?, ?)";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, make);
        statement.setString(2, model);
        statement.setString(3, year);
        statement.setString(4, price);

        // Execute the query
        int rowsInserted = statement.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Car added successfully!");
            
            // Get the updated data from the database and update the JTable
            String selectQuery = "SELECT * FROM Electric_Cars";
            java.sql.Statement selectStatement = con.createStatement();
            ResultSet rs = selectStatement.executeQuery(selectQuery);

            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int cols = rsmd.getColumnCount();
            String[] colname = new String[cols];

            for (int i = 0; i < cols; i++) {
                colname[i] = rsmd.getColumnName(i + 1);
            }

            DefaultTableModel model10 = new DefaultTableModel(colname, 0);

            while (rs.next()) {
                Object[] row = new Object[cols];
                for (int i = 0; i < cols; i++) {
                    row[i] = rs.getObject(i + 1);
                }
                model10.addRow(row);
            }

            table7.setModel(model10);

            rs.close();
            selectStatement.close();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while adding a car to the database", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        int selectedRow = table3.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the existing values from the selected row
        Object idObj = table3.getValueAt(selectedRow, 0);
        Object makeObj = table3.getValueAt(selectedRow, 1);
        Object modelObj = table3.getValueAt(selectedRow, 2);
        Object yearObj = table3.getValueAt(selectedRow, 3);
        Object priceObj = table3.getValueAt(selectedRow, 4);

        // Check for null values
        String id = (idObj != null) ? idObj.toString() : "";
        String make = (makeObj != null) ? makeObj.toString() : "";
        String model = (modelObj != null) ? modelObj.toString() : "";
        String year = (yearObj != null) ? yearObj.toString() : "";
        String price = (priceObj != null) ? priceObj.toString() : "";

        // Prompt the user to enter new values
        String newMake = JOptionPane.showInputDialog(this, "Enter new make:", make);
        String newModel = JOptionPane.showInputDialog(this, "Enter new model:", model);
        String newYear = JOptionPane.showInputDialog(this, "Enter new year:", year);
        String newPrice = JOptionPane.showInputDialog(this, "Enter new price:", price);

        // Create the UPDATE query
        String query = "UPDATE SUV_Cars SET make = ?, model = ?, year = ?, price = ? WHERE id = ?";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, newMake);
        statement.setString(2, newModel);
        statement.setString(3, newYear);
        statement.setString(4, newPrice);
        statement.setString(5, id);

        // Execute the query
        int rowsUpdated = statement.executeUpdate();

        // Close the statement
        statement.close();
        
        if (rowsUpdated > 0) {
            // Update the corresponding cell in the JTable with the new value
            table3.setValueAt(newMake, selectedRow, 1);
            table3.setValueAt(newModel, selectedRow, 2);
            table3.setValueAt(newYear, selectedRow, 3);
            table3.setValueAt(newPrice, selectedRow, 4);

            JOptionPane.showMessageDialog(this, "Car updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update car.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while updating the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }



    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        int selectedRow = table4.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the existing values from the selected row
        Object idObj = table4.getValueAt(selectedRow, 0);
        Object makeObj = table4.getValueAt(selectedRow, 1);
        Object modelObj = table4.getValueAt(selectedRow, 2);
        Object yearObj = table4.getValueAt(selectedRow, 3);
        Object priceObj = table4.getValueAt(selectedRow, 4);

        // Check for null values
        String id = (idObj != null) ? idObj.toString() : "";
        String make = (makeObj != null) ? makeObj.toString() : "";
        String model = (modelObj != null) ? modelObj.toString() : "";
        String year = (yearObj != null) ? yearObj.toString() : "";
        String price = (priceObj != null) ? priceObj.toString() : "";

        // Prompt the user to enter new values
        String newMake = JOptionPane.showInputDialog(this, "Enter new make:", make);
        String newModel = JOptionPane.showInputDialog(this, "Enter new model:", model);
        String newYear = JOptionPane.showInputDialog(this, "Enter new year:", year);
        String newPrice = JOptionPane.showInputDialog(this, "Enter new price:", price);

        // Create the UPDATE query
        String query = "UPDATE Luxury_Cars SET make = ?, model = ?, year = ?, price = ? WHERE id = ?";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, newMake);
        statement.setString(2, newModel);
        statement.setString(3, newYear);
        statement.setString(4, newPrice);
        statement.setString(5, id);

        // Execute the query
        int rowsUpdated = statement.executeUpdate();

        // Close the statement
        statement.close();
        
        if (rowsUpdated > 0) {
            // Update the corresponding cell in the JTable with the new value
            table4.setValueAt(newMake, selectedRow, 1);
            table4.setValueAt(newModel, selectedRow, 2);
            table4.setValueAt(newYear, selectedRow, 3);
            table4.setValueAt(newPrice, selectedRow, 4);

            JOptionPane.showMessageDialog(this, "Car updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update car.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while updating the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }



    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        int selectedRow = table5.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the existing values from the selected row
        Object idObj = table5.getValueAt(selectedRow, 0);
        Object makeObj = table5.getValueAt(selectedRow, 1);
        Object modelObj = table5.getValueAt(selectedRow, 2);
        Object yearObj = table5.getValueAt(selectedRow, 3);
        Object priceObj = table5.getValueAt(selectedRow, 4);

        // Check for null values
        String id = (idObj != null) ? idObj.toString() : "";
        String make = (makeObj != null) ? makeObj.toString() : "";
        String model = (modelObj != null) ? modelObj.toString() : "";
        String year = (yearObj != null) ? yearObj.toString() : "";
        String price = (priceObj != null) ? priceObj.toString() : "";

        // Prompt the user to enter new values
        String newMake = JOptionPane.showInputDialog(this, "Enter new make:", make);
        String newModel = JOptionPane.showInputDialog(this, "Enter new model:", model);
        String newYear = JOptionPane.showInputDialog(this, "Enter new year:", year);
        String newPrice = JOptionPane.showInputDialog(this, "Enter new price:", price);

        // Create the UPDATE query
        String query = "UPDATE Cabrio_Cars SET make = ?, model = ?, year = ?, price = ? WHERE id = ?";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, newMake);
        statement.setString(2, newModel);
        statement.setString(3, newYear);
        statement.setString(4, newPrice);
        statement.setString(5, id);

        // Execute the query
        int rowsUpdated = statement.executeUpdate();

        // Close the statement
        statement.close();
        
        if (rowsUpdated > 0) {
            // Update the corresponding cell in the JTable with the new value
            table5.setValueAt(newMake, selectedRow, 1);
            table5.setValueAt(newModel, selectedRow, 2);
            table5.setValueAt(newYear, selectedRow, 3);
            table5.setValueAt(newPrice, selectedRow, 4);

            JOptionPane.showMessageDialog(this, "Car updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update car.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while updating the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }



    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        int selectedRow = table6.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the existing values from the selected row
        Object idObj = table6.getValueAt(selectedRow, 0);
        Object makeObj = table6.getValueAt(selectedRow, 1);
        Object modelObj = table6.getValueAt(selectedRow, 2);
        Object yearObj = table6.getValueAt(selectedRow, 3);
        Object priceObj = table6.getValueAt(selectedRow, 4);

        // Check for null values
        String id = (idObj != null) ? idObj.toString() : "";
        String make = (makeObj != null) ? makeObj.toString() : "";
        String model = (modelObj != null) ? modelObj.toString() : "";
        String year = (yearObj != null) ? yearObj.toString() : "";
        String price = (priceObj != null) ? priceObj.toString() : "";

        // Prompt the user to enter new values
        String newMake = JOptionPane.showInputDialog(this, "Enter new make:", make);
        String newModel = JOptionPane.showInputDialog(this, "Enter new model:", model);
        String newYear = JOptionPane.showInputDialog(this, "Enter new year:", year);
        String newPrice = JOptionPane.showInputDialog(this, "Enter new price:", price);

        // Create the UPDATE query
        String query = "UPDATE Sport_Cars SET make = ?, model = ?, year = ?, price = ? WHERE id = ?";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, newMake);
        statement.setString(2, newModel);
        statement.setString(3, newYear);
        statement.setString(4, newPrice);
        statement.setString(5, id);

        // Execute the query
        int rowsUpdated = statement.executeUpdate();

        // Close the statement
        statement.close();
        
        if (rowsUpdated > 0) {
            // Update the corresponding cell in the JTable with the new value
            table6.setValueAt(newMake, selectedRow, 1);
            table6.setValueAt(newModel, selectedRow, 2);
            table6.setValueAt(newYear, selectedRow, 3);
            table6.setValueAt(newPrice, selectedRow, 4);

            JOptionPane.showMessageDialog(this, "Car updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update car.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while updating the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }



    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        int selectedRow = table7.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the existing values from the selected row
        Object idObj = table7.getValueAt(selectedRow, 0);
        Object makeObj = table7.getValueAt(selectedRow, 1);
        Object modelObj = table7.getValueAt(selectedRow, 2);
        Object yearObj = table7.getValueAt(selectedRow, 3);
        Object priceObj = table7.getValueAt(selectedRow, 4);

        // Check for null values
        String id = (idObj != null) ? idObj.toString() : "";
        String make = (makeObj != null) ? makeObj.toString() : "";
        String model = (modelObj != null) ? modelObj.toString() : "";
        String year = (yearObj != null) ? yearObj.toString() : "";
        String price = (priceObj != null) ? priceObj.toString() : "";

        // Prompt the user to enter new values
        String newMake = JOptionPane.showInputDialog(this, "Enter new make:", make);
        String newModel = JOptionPane.showInputDialog(this, "Enter new model:", model);
        String newYear = JOptionPane.showInputDialog(this, "Enter new year:", year);
        String newPrice = JOptionPane.showInputDialog(this, "Enter new price:", price);

        // Create the UPDATE query
        String query = "UPDATE Electric_Cars SET make = ?, model = ?, year = ?, price = ? WHERE id = ?";

        // Prepare the statement and set the parameter values
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, newMake);
        statement.setString(2, newModel);
        statement.setString(3, newYear);
        statement.setString(4, newPrice);
        statement.setString(5, id);

        // Execute the query
        int rowsUpdated = statement.executeUpdate();

        // Close the statement
        statement.close();
        
        if (rowsUpdated > 0) {
            // Update the corresponding cell in the JTable with the new value
            table7.setValueAt(newMake, selectedRow, 1);
            table7.setValueAt(newModel, selectedRow, 2);
            table7.setValueAt(newYear, selectedRow, 3);
            table7.setValueAt(newPrice, selectedRow, 4);

            JOptionPane.showMessageDialog(this, "Car updated successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update car.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while updating the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }



    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        int selectedRow = table3.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the selected car's ID from the JTable
        String id = table3.getValueAt(selectedRow, 0).toString();

        // Create the DELETE query
        String query = "DELETE FROM SUV_Cars WHERE id = ?";

        // Prepare the statement and set the parameter value
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, id);

        // Execute the query
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            // Remove the deleted row from the JTable
            DefaultTableModel model = (DefaultTableModel) table3.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    




    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
       int selectedRow = table4.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the selected car's ID from the JTable
        String id = table4.getValueAt(selectedRow, 0).toString();

        // Create the DELETE query
        String query = "DELETE FROM Luxury_Cars WHERE id = ?";

        // Prepare the statement and set the parameter value
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, id);

        // Execute the query
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            // Remove the deleted row from the JTable
            DefaultTableModel model = (DefaultTableModel) table4.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    




    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
       int selectedRow = table5.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the selected car's ID from the JTable
        String id = table5.getValueAt(selectedRow, 0).toString();

        // Create the DELETE query
        String query = "DELETE FROM Cabrio_Cars WHERE id = ?";

        // Prepare the statement and set the parameter value
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, id);

        // Execute the query
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            // Remove the deleted row from the JTable
            DefaultTableModel model = (DefaultTableModel) table5.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    




    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        int selectedRow = table6.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the selected car's ID from the JTable
        String id = table6.getValueAt(selectedRow, 0).toString();

        // Create the DELETE query
        String query = "DELETE FROM Sport_Cars WHERE id = ?";

        // Prepare the statement and set the parameter value
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, id);

        // Execute the query
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            // Remove the deleted row from the JTable
            DefaultTableModel model = (DefaultTableModel) table6.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    




    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
       int selectedRow = table7.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a car to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the selected car's ID from the JTable
        String id = table7.getValueAt(selectedRow, 0).toString();

        // Create the DELETE query
        String query = "DELETE FROM Electric_Cars WHERE id = ?";

        // Prepare the statement and set the parameter value
        PreparedStatement statement = con.prepareStatement(query);
        statement.setString(1, id);

        // Execute the query
        int rowsDeleted = statement.executeUpdate();

        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(this, "Car deleted successfully!");

            // Remove the deleted row from the JTable
            DefaultTableModel model = (DefaultTableModel) table7.getModel();
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete car.");
        }

        // Close the statement
        statement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the car.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    




    }//GEN-LAST:event_jButton32ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CARADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CARADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CARADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CARADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CARADMIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable table;
    private javax.swing.JTable table1;
    private javax.swing.JTable table2;
    private javax.swing.JTable table3;
    private javax.swing.JTable table4;
    private javax.swing.JTable table5;
    private javax.swing.JTable table6;
    private javax.swing.JTable table7;
    // End of variables declaration//GEN-END:variables
}
