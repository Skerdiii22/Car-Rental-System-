/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FORYOU;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.Date;
import java.util.Locale;
import java.time.LocalDate;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.Writer;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
/**
 *
 * @author user
 */
public class PROFILE extends javax.swing.JFrame {
private int user_id;
Connection con=null;
ResultSet rs=null;
DefaultTableModel model = null;
PreparedStatement pst= null;
private boolean modifyingMode = false;
private int reservationBeingModified = -1;

    /**
     * Creates new form PROFILE
     */
    public PROFILE(int id) {
        user_id=id;
        con=DBConnection.connect();
        initComponents();
        
    }
    private PROFILE() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        date1 = new javax.swing.JTextField();
        time1 = new javax.swing.JTextField();
        time2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jLabel1.setText("Orskyan My Profile Section");

        jButton1.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 51, 51));
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View My Bookings");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        modifyButton.setText("Modify Booking");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel Booking");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        jButton5.setText("Request QR Code");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Change Password");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(modifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(time2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(date1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton5)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(time1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(216, 216, 216))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(modifyButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(time2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(date1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(time1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MAINUS M = new MAINUS(user_id);
        M.show();
        dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       int selectedRow = table.getSelectedRow();
if (selectedRow == -1) {
    JOptionPane.showMessageDialog(this, "Please select a reservation to generate a QR code for.", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}
try{
String date1 = table.getValueAt(selectedRow, 0).toString();
String date2 = table.getValueAt(selectedRow, 1).toString();
String time1 = table.getValueAt(selectedRow, 2).toString();
String time2 = table.getValueAt(selectedRow, 3).toString();


String qrCodeData = "Date1: " + date1 + "\nDate2: " + date2 + "\nTime1: " + time1 + "\nTime2: " + time2 ;
 
        generateQRCode(qrCodeData);
    } catch (IOException ex) {
        Logger.getLogger(PROFILE.class.getName()).log(Level.SEVERE, null, ex);
    }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                                                 
    try {
        String query = "SELECT Date_1, Date_2, Time_1, Time_2, Car_Model FROM `reserve` WHERE user_id = ?";
        PreparedStatement pst = con.prepareStatement(query);
        pst.setInt(1, user_id);

        ResultSet rs = pst.executeQuery();

        ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
        int cols = rsmd.getColumnCount();
        String[] colname = new String[cols];

        for (int i = 0; i < cols; i++) {
            colname[i] = rsmd.getColumnName(i + 1);
        }

        DefaultTableModel model = new DefaultTableModel(colname, 0);

        LocalDate currentDate = LocalDate.now();

        while (rs.next()) {
            LocalDate reservationDate = LocalDate.parse(rs.getString("Date_2"), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            
            // Filter out reservations with dates before the current date
            if (reservationDate.isBefore(currentDate)) {
                continue;
            }
            
            Object[] row = new Object[cols];
            for (int i = 0; i < cols; i++) {
                row[i] = rs.getObject(i + 1);
            }
            model.addRow(row);
        }

        table.setModel(model);

        rs.close();
        pst.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while retrieving car data.", "Error", JOptionPane.ERROR_MESSAGE);
    }    


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    int selectedRow = table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a reservation to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Get the data from the selected row in the JTable
        String date1Str = table.getValueAt(selectedRow, 0).toString();
        String date2Str = table.getValueAt(selectedRow, 1).toString();
        String time1 = table.getValueAt(selectedRow, 2).toString();
        String time2 = table.getValueAt(selectedRow, 3).toString();

        // Convert date strings to numerical values representing the day of the year
        int date1DayOfYear = getDayOfYear(date1Str);
        int currentDayOfYear = LocalDate.now().getDayOfYear();
        
        System.out.println("Booking Date Day of Year: " + date1DayOfYear);
        System.out.println("Current Date Day of Year: " + currentDayOfYear);

        // Check if the difference between date1 and the current date is at least 3 days
        if (date1DayOfYear - currentDayOfYear >= 3) {
                   try {
            // Create the DELETE query with the WHERE clause based on Date1, Date2, Time1, and Time2
            String query = "DELETE FROM reserve WHERE Date_1 = ? AND Date_2 = ? AND Time_1 = ? AND Time_2 = ?";

            // Prepare the statement and set the parameter values
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, date1Str);
            pst.setString(2, date2Str);
            pst.setString(3, time1);
            pst.setString(4, time2);

            // Execute the query
            int rowsDeleted = pst.executeUpdate();

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Reservation deleted successfully!");

                // Remove the deleted row from the JTable
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete reservation.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while deleting the reservation.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // If cancellation is not allowed, show a message to the user
        JOptionPane.showMessageDialog(this, "Booking cannot be canceled less than 3 days from the pickup date.", "Cancellation Not Allowed", JOptionPane.INFORMATION_MESSAGE);
    }
} catch (DateTimeParseException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error occurred while parsing the date.", "Error", JOptionPane.ERROR_MESSAGE);
} finally {
    // Close the statement in the finally block
    if (pst != null) {
        try {
            pst.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

   
    }//GEN-LAST:event_jButton4ActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
       if (!modifyingMode) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a reservation to modify.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Get the data from the selected row in the JTable
            String date1Str = table.getValueAt(selectedRow, 0).toString();
            String time11 = table.getValueAt(selectedRow, 2).toString();
            String time21 = table.getValueAt(selectedRow, 3).toString();

            // Display the data in input fields for modification
            date1.setText(date1Str);
            time1.setText(time11);
            time2.setText(time21);

            // Enable the input fields for modification
            date1.setEnabled(true);
            time1.setEnabled(true);
            time2.setEnabled(true);

            // Set the flag for modifying mode and the reservation being modified
            modifyingMode = true;
            reservationBeingModified = selectedRow;

            // Update the button text to indicate "Save Changes" mode
            modifyButton.setText("Save Changes");
        } catch (DateTimeParseException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error occurred while parsing the date.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {

        // After saving changes, reset the UI and flags
        modifyingMode = false;
       
        modifyButton.setText("Modify");
        
        date1.setEnabled(false);
        time1.setEnabled(false);
        time2.setEnabled(false);
        try {
    int selectedRow = reservationBeingModified;

    String newDate1Str = date1.getText().trim(); // User input in "EEE MMM dd u" format
    String newTime1 = time1.getText();
    String newTime2 = time2.getText();

    DateTimeFormatter userInputFormat = DateTimeFormatter.ofPattern("EEE MMM dd u", Locale.ENGLISH);
    LocalDate newDate1 = LocalDate.parse(newDate1Str, userInputFormat);
    
    
   
    // Update the reservation in the database
    String updateQuery = "UPDATE reserve SET Date_1 = ?, Time_1 = ?, Time_2 = ? WHERE user_id = ? AND Date_1 = ? AND Time_1 = ?";
    PreparedStatement updateStatement = con.prepareStatement(updateQuery);
    updateStatement.setDate(1, java.sql.Date.valueOf(newDate1));
    updateStatement.setString(2, newTime1);
    updateStatement.setString(3, newTime2);
    updateStatement.setInt(4, user_id);
    updateStatement.setString(5, table.getValueAt(selectedRow, 0).toString());
    updateStatement.setString(6, table.getValueAt(selectedRow, 2).toString());

    int rowsUpdated = updateStatement.executeUpdate();

    if (rowsUpdated > 0) {
        JOptionPane.showMessageDialog(this, "Reservation modified successfully. If you want to change more on your reservation please cancel it and reserve again!");

        // Update the values in the JTable
        table.setValueAt(newDate1Str, selectedRow, 0); // Display user input format
        table.setValueAt(newTime1, selectedRow, 2);
        table.setValueAt(newTime2, selectedRow, 3);
    } else {
        JOptionPane.showMessageDialog(this, "Failed to modify reservation.");
    }

    updateStatement.close();
} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error occurred while modifying the reservation.", "Error", JOptionPane.ERROR_MESSAGE);
} catch (DateTimeParseException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error occurred while parsing the date.", "Error", JOptionPane.ERROR_MESSAGE);
}
    }
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        VERIFY V= new VERIFY();
        V.show();
        dispose();
        
    }//GEN-LAST:event_jButton3ActionPerformed

public void generateQRCode(String data) throws IOException {
    int width = 300; // Width of the QR code image
    int height = 300; // Height of the QR code image

    try {
        // Generate the QR code image
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix bitMatrix = qrCodeWriter.encode(data, BarcodeFormat.QR_CODE, width, height);
        BufferedImage qrCodeImage = MatrixToImageWriter.toBufferedImage(bitMatrix);

        // Load the background frame image
        BufferedImage backgroundFrame = ImageIO.read(new File("/Users/user/Downloads/rolls.jpeg")); // Provide the path to your background image

        // Create a new image with the same size as the background frame
        BufferedImage compositeImage = new BufferedImage(backgroundFrame.getWidth(), backgroundFrame.getHeight(), BufferedImage.TYPE_INT_ARGB);

        // Draw the background frame image onto the new image
        Graphics2D graphics = compositeImage.createGraphics();
        graphics.drawImage(backgroundFrame, 0, 0, null);

        // Draw the QR code image onto the new image
        int qrCodeX = 100;
        int qrCodeY = 100;
        graphics.drawImage(qrCodeImage, qrCodeX, qrCodeY, null);

        // Dispose the Graphics2D object
        graphics.dispose();

        // Display the composite image
        ImageIcon icon = new ImageIcon(compositeImage);
        JLabel label = new JLabel(icon);
        JOptionPane.showMessageDialog(null, label, "QR Code with Information", JOptionPane.PLAIN_MESSAGE);
    } catch (Exception e) {
        e.printStackTrace();
    }
}

private int getDayOfYear(String dateStr) {
    DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("EEE MMM dd u", Locale.ENGLISH);
    LocalDate date = LocalDate.parse(dateStr, dateFormat);
    return date.getDayOfYear();
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PROFILE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PROFILE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PROFILE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PROFILE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PROFILE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField date1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifyButton;
    private javax.swing.JTable table;
    private javax.swing.JTextField time1;
    private javax.swing.JTextField time2;
    // End of variables declaration//GEN-END:variables


}